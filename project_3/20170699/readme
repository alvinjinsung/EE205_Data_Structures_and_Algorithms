20170699 Jinsung Choi

(1) I created a hash table as the data structure for this project. Each distinct word will be converted into key using polynomial rolling hash function and each word appearances in the text will be the value. I used linked list for collision handling.

Polynomial rolling hash function: str= str[0]+str[1]*p+str[2]*p^2+...+str[n-1]*p^(n-1) mod m
p: 53(good choice for English characters withe upper and lower case)
m: size of hash table, large prime number. I selected 100003 as typical text will not contain more than 10k distinct words(total English words in dictionary: 17k words)

Algorithm
1. Calculate the hash index for the input word
2. Check if that word exists by checking the index bucket of hash table
3. If the same word already exists, increment the count of that word
4. If it does not exist, insert the word_info into hash table
5. After inserting all the words in the text, convert the hash table into an array of word_info
6. qsort() on the word_info array comparing the word count
7. Print from the high frequency word to low frequency word(if n specified, print n words from top)

Because it is hash table, checking and inserting all requires O(1) time.
Converting hash table into array of word_info requires O(n) time.
qsort() requires O(nlogn) time.
Printing requires O(n) time.

Therefore, overall worst-case running time is O(nlogn).


(2) I checked correctness by comparing with the result of token.c on two text files that is provided.
No difference detected between the result of my program and token program so I assume my method was correct.


(3) Timing results (measured in eelab5)
Crime-and-Punishment.txt: 0.048059s
iliad.txt: 0.052371s


(4) Since we do not know which words will be inserted and how much each words will appear, we must compare the count of each words after all the words inserted. This means that we need to sort no matter what which takes O(nlogn) time. Therefore the best you can do is O(nlogn). My implementation using hash table does not exceed O(nlogn) in any step which makes it optimal.

(5) I collaborated with 문준석
